snippet cl "define a new class"
class ${1:`!p snip.rv = snip.basename or "name"`} {
	public:
		${1/(\w+).*/$1/} (${2:arguments});
		virtual ~${1/(\w+).*/$1/} ();

	private:
		${0:/* data */}
};
endsnippet

snippet cla "An entire .h[pp] generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`} {
	public:
		$1();
		virtual ~$1();

	private:
		$3
};

#endif // $2
endsnippet

snippet guard "An empty ifndef guard"
#ifndef ${1:`!v substitute(vim_snippets#Filename('$1','ClassName'),'.*','\U&\E','')`}
#define $1

#endif // $1
endsnippet

snippet inc "Include a cpp non-system header with the .h extension"
#include "${VISUAL}$0.h"
endsnippet

snippet pinc "Include a cpp non-system header with the .hpp extension"
#include "${VISUAL}$0.hpp"
endsnippet

snippet sinc "Include a cpp system header"
#include <${VISUAL}$0>
endsnippet

snippet tc "Catch2 test case"
TEST_CASE($1, $2) {
	$0
}
endsnippet
